import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    public static List<Integer> missingNumbers(List<Integer> arr, List<Integer> brr) {
         ArrayList<Integer> c = new ArrayList<>();
         ArrayList<Integer> arr1 = new ArrayList<>(Arrays.asList(203,204,205,206,207,208,203,204,205,206));
         ArrayList<Integer> brr1= new ArrayList<Integer>(Arrays.asList(203,204,204,205,206,207,205,208,203,206,205,206,204));
         int count=0;
         int count1=0;
         int asize=arr1.size();
         int bsize=brr.size();
         int arraysize=0;
        
    for(int i=0;i<asize;i++)
    {
       for(int j=0;j<asize;j++)
       {
           if(brr.get(i)==arr1.get(j))
           count++;
           System.out.print(count);
       }
       for(int k=0;k<bsize;k++)
       {
          if(brr.get(i)==brr.get(k)) 
          count1++;
          System.out.print(" "+count1);
       }
       if((count1)!=count)
       {
           c.add(brr.get(i));
       }
          count=0;
         count1=0;
    }
    Collections.sort(c);
    
   return c;
    }

}

public class Solution {

	 public static void main(String[] args) throws IOException {
	        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
	        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

	        int n = Integer.parseInt(bufferedReader.readLine().trim());

	        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
	            .map(Integer::parseInt)
	            .collect(toList());

	        int m = Integer.parseInt(bufferedReader.readLine().trim());

	        List<Integer> brr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
	            .map(Integer::parseInt)
	            .collect(toList());

	        List<Integer> result = Result.missingNumbers(arr, brr);

	        bufferedWriter.write(
	            result.stream()
	                .map(Object::toString)
	                .collect(joining(" "))
	            + "\n"
	        );

	        bufferedReader.close();
	        bufferedWriter.close();
	    }
	}

